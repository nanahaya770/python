# Методы строк (str)

# Список методов строк Python без обратных кавычек:

# 1. str.capitalize() - Приводит первую букву к верхнему регистру.  
# 2. str.casefold() - Приводит строку к нижнему регистру.  
# 3. str.center() - Выравнивает строку по центру.  
# 4. str.count() - Считает вхождения подстроки.  
# 5. str.encode() - Кодирует строку в байты.  
# 6. str.endswith() - Проверяет окончание строки.  
# 7. str.expandtabs() - Заменяет табуляции на пробелы.  
# 8. str.find() - Находит индекс подстроки.  
# 9. str.format() - Форматирует строку с подстановками.  
# 10. str.format_map() - Форматирует с использованием словаря.  
# 11. str.index() - Находит индекс подстроки (ошибка при отсутствии).  
# 12. str.isalnum() - Проверяет, состоит ли из букв и цифр.  
# 13. str.isalpha() - Проверяет, состоит ли из букв.  
# 14. str.isascii() - Проверяет, состоит ли из ASCII-символов.  
# 15. str.isdigit() - Проверяет, состоит ли из цифр.  
# 16. str.islower() - Проверяет, все ли буквы в нижнем регистре.  
# 17. str.isnumeric() - Проверяет, состоит ли из чисел.  
# 18. str.isspace() - Проверяет, состоит ли из пробелов.  
# 19. str.istitle() - Проверяет, заглавные ли первые буквы.  
# 20. str.isupper() - Проверяет, все ли буквы в верхнем регистре.  
# 21. str.join() - Объединяет последовательность строк.  
# 22. str.ljust() - Выравнивает строку влево.  
# 23. str.lower() - Приводит строку к нижнему регистру.  
# 24. str.lstrip() - Удаляет пробелы слева.  
# 25. str.maketrans() - Создает таблицу перевода символов.  
# 26. str.partition() - Разделяет строку на три части.  
# 27. str.replace() - Заменяет подстроку на другую.  
# 28. str.rfind() - Находит последний индекс подстроки.  
# 29. str.rindex() - Находит последний индекс (ошибка при отсутствии).  
# 30. str.rjust() - Выравнивает строку вправо.  
# 31. str.rsplit() - Разделяет строку справа.  
# 32. str.rstrip() - Удаляет пробелы справа.  
# 33. str.split() - Разделяет строку на список.  
# 34. str.splitlines() - Разделяет строку по строкам.  
# 35. str.startswith() - Проверяет начало строки.  
# 36. str.strip() - Удаляет пробелы с обеих сторон.  
# 37. str.swapcase() - Меняет регистр букв.  
# 38. str.title() - Приводит к заглавному стилю.  
# 39. str.upper() - Приводит строку к верхнему регистру.  
# 40. str.zfill() - Заполняет строку нулями слева.

# print(dir(str))

print('пример'.capitalize())
print('ПРИМЕР'.capitalize())
print('приМер'.capitalize())


print('пример'.count('р'))
print('Считает вхождения подстроки. Считает вхождения.'.count('тает'))


print("Находит индекс подстроки.".find('и'))
print("Находит индекс подстроки.".find('стр'))
print("Находит индекс подстроки.".find('Василий'))


print("Находит индекс подстроки.".index('и'))
print("Находит индекс подстроки.".index('стр'))
# print("Находит индекс подстроки.".index('Василий'))  # ValueError: substring not found

print('text123'.isalnum())

print('Text123'.islower())
print('text123'.islower())

print('Заменяет подстроку на другую.'.replace('Заменяет', 'Подменяет'))
print('Заменяет подстроку на другую.'.replace('Василий', 'Подменяет'))

print('Разделяет строку на список.'.split())
print('ab,cd,ef'.split(','))
print('18:13:00'.split(':'))

print('Проверяет начало строки. '.startswith('Про'))
print('+0 900 123 4567'.startswith('+7'))

print('      Удаляет пробелы с обеих сторон.    '.strip() + 'Конец строки')
print('первый второй третий'.title())
print('василий васильевич васильков'.title())

print('василий васильевич васильков'.capitalize())

text = '''Он шёл со своим другом по дороге и вёл шутливый разговор с ним. И, вдруг споткнулся на ровном месте! Он остановился и спросил, а что это такое было, ведь дорога ровная:
- Друг ответил - ЭТО СЕТИ!
- Какие сети, дорогой, под нашими ногами асфальт!
- Невидимые сети для глаз, но ощутимые энергетически, - ответил друг!
- Ты что, обрёл зрение пчёл и видишь, как они, в другом диапазоне?
- Нееет, ответил друг, такого зрения у меня нет, но у меня окрылись глаза сердца.
- И что ты видишь вокруг? – спросил вновь он своего товарища.
- А вот видишь недалеко стоят мужики и они ругаются и вот-вот подерутся? Так вот они зацепились за узел вражды в этой сетке, они не смогли перешагнуть через него и вот - запутались! Видишь, какие они разгорячённые, так и убить могут друг друга. Пойдём выведем их из этого узла.
Подошли два друга к спорящим и отвели их чуть в сторону и спросили, как пройти на проспект Мира и Согласия? Те оторопели, но как-то утихли, так как были выведены из зоны конфликта, успокоились и подсказали точный маршрут друзьям. Потом замялись и протянули руки друг другу, попросив прощение за то, что неправильно поняли друг друга и погорячились. И пошли своей дорогой.
Посмотри, вот там лежит сеть осуждения, показав на наклеенную газету на столбе. А вот там сеть обид и разочарования, показав на девушку, которая кричала по сотовому телефону «бывшему», внезапно застряв на одном месте, ведь она попала ещё и в сеть ненависти.
Они шли, и друг показывал насколько много на самом деле ловушек-сетей раскинуто для человека: вот там сеть залов с игральными автоматами, а вот там магазин с настоящими автоматами. А вот там сеть развлечения и праздной жизни. А вот там сетевые магазины для шопинга, где люди покупают мимолётное счастье, а оно быстро уходит, и они становятся опустошенными и не знают, как выбраться из сети пустоты...
— Вот видишь, друг, если раскрыть глаза своего сердца, то можно увидеть множество раскинутых сетей для Души человека. Тот, кто не проснулся, тот попадает в них и винит в своих бедах других, а кто проснулся – обходит их и даже убирает, чтобы другие люди могли беспрепятственно ходить и созидать на белом Свете.'''

print()
print(text.count(','))
print(text.count('ты'))
print(text.replace(",", "/"))
print(text.title())
print(text.split())
print(text.split("."))
print(text.find("девушку"))
